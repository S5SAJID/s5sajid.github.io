---
import { getCollection } from 'astro:content';
import Layout from '../../layouts/Layout.astro';
import BlogJsonLd from '../../components/BlogJsonLd.astro';

export async function getStaticPaths() {
  const blogEntries = await getCollection('blog');
  return blogEntries.map(entry => ({
    params: { slug: entry.slug }, 
    props: { entry },
  }));
}

const { entry } = Astro.props;
const { Content } = await entry.render();

// Generate meta description from content if not provided
const description = entry.data.description || entry.data.excerpt || `Read ${entry.data.title} - a blog post about ${entry.data.category}`;

// Format date for display
const formattedDate = new Date(entry.data.date).toLocaleDateString('en-US', {
  year: 'numeric',
  month: 'long',
  day: 'numeric'
});

const author = {
  name: "S5 Sajid",
  url: "https://s5sajid.github.io"
};
---

<Layout 
  title={entry.data.title}
  description={description}
  image={entry.data.image}
  article={true}
>
  <BlogJsonLd
    title={entry.data.title}
    description={description}
    publishDate={entry.data.date}
    updateDate={entry.data.lastModified}
    author={author}
    image={entry.data.image}
    url={Astro.url.href}
  />
  
  <main class="min-h-screen py-20">
    <div class="container mx-auto px-6 max-w-3xl">
      <a href="/blog" class="inline-block mb-12 hover:underline">← Back to Blog</a>
      
      <article class="prose prose-lg max-w-none">
        <span class="text-sm tracking-widest">{entry.data.category}</span>
        <h1 class="text-4xl md:text-5xl font-bold mt-2 mb-4">{entry.data.title}</h1>
        <div class="flex gap-4 text-sm mb-12">
          <time datetime={entry.data.date}>{formattedDate}</time>
          <span>·</span>
          <span>{entry.data.readTime}</span>
        </div>
        
        {entry.data.image && (
          <img 
            src={entry.data.image} 
            alt={entry.data.imageAlt || entry.data.title}
            class="w-full h-auto rounded-lg shadow-lg mb-8"
            width="1200"
            height="630"
          />
        )}
        
        <Content />
        
        {entry.data.tags && entry.data.tags.length > 0 && (
          <div class="mt-12 pt-6 border-t border-gray-200">
            <div class="flex gap-2 flex-wrap">
              {entry.data.tags.map((tag: string) => (
                <span class="px-3 py-1 bg-gray-100 text-sm rounded-full">
                  {tag}
                </span>
              ))}
            </div>
          </div>
        )}
      </article>
    </div>
  </main>
</Layout>

<style is:global>
  .prose {
    max-width: 100ch;
    width: 100%;
  }
  
  .prose h2 {
    font-size: 1.875rem;
    margin-top: 2.5rem;
    margin-bottom: 1.25rem;
    font-weight: 700;
  }
  
  .prose p {
    margin-bottom: 1.5rem;
    line-height: 1.75;
  }
  
  .prose ul {
    list-style-type: disc;
    padding-left: 1.5rem;
    margin-bottom: 1.5rem;
  }
  
  .prose li {
    margin-bottom: 0.5rem;
  }
</style>
